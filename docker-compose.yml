version: '3.8'

services:
  # Blog CRM Management Service
  blog-service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: mejona-blog-service
    ports:
      - "8082:8082"
    environment:
      - GIN_MODE=release
      - PORT=8082
      - DB_HOST=mysql
      - DB_USER=blog_user
      - DB_PASSWORD=blog_secure_password_2024
      - DB_NAME=mejona_unified
      - DB_PORT=3306
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=redis_secure_password_2024
      - JWT_SECRET=blog_jwt_secret_key_2024
      - API_VERSION=v1
      - ENABLE_SWAGGER=true
      - LOG_LEVEL=info
    env_file:
      - .env
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - blog-network
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
      - ./cache:/app/cache
    healthcheck:
      test: ["CMD", "curl", "--fail", "--silent", "http://localhost:8082/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # MySQL Database (shared with other services)
  mysql:
    image: mysql:8.0
    container_name: mejona-blog-mysql
    environment:
      MYSQL_ROOT_PASSWORD: root_secure_password_2024
      MYSQL_DATABASE: mejona_unified
      MYSQL_USER: blog_user
      MYSQL_PASSWORD: blog_secure_password_2024
    ports:
      - "3308:3306"  # Different port to avoid conflicts
    volumes:
      - mysql_blog_data:/var/lib/mysql
      - ./scripts/mysql-init:/docker-entrypoint-initdb.d
      - ./migrations:/migrations
    command: --default-authentication-plugin=mysql_native_password --innodb-buffer-pool-size=256M
    restart: unless-stopped
    networks:
      - blog-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "blog_user", "-pblog_secure_password_2024"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Redis Cache for Blog Service
  redis:
    image: redis:7-alpine
    container_name: mejona-blog-redis
    ports:
      - "6381:6379"  # Different port to avoid conflicts
    volumes:
      - redis_blog_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server --appendonly yes --requirepass redis_secure_password_2024
    restart: unless-stopped
    networks:
      - blog-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy for Blog Service
  nginx:
    image: nginx:alpine
    container_name: mejona-blog-nginx
    ports:
      - "8083:80"   # Different port for blog service nginx
      - "8443:443"  # Different port for SSL
    volumes:
      - ./nginx/blog-service.conf:/etc/nginx/conf.d/default.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - blog-service
    restart: unless-stopped
    networks:
      - blog-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health-proxy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for Blog Service Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: mejona-blog-prometheus
    ports:
      - "9091:9090"  # Different port to avoid conflicts
    volumes:
      - ./monitoring/prometheus-blog.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_blog_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
      - '--web.external-url=http://localhost:9091'
    restart: unless-stopped
    networks:
      - blog-network

  # Grafana for Blog Service Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: mejona-blog-grafana
    ports:
      - "3001:3000"  # Different port to avoid conflicts
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=blog_admin_secure_2024
      - GF_SERVER_ROOT_URL=http://localhost:3001
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana_blog_data:/var/lib/grafana
      - ./monitoring/grafana/blog-dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/blog-datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - blog-network

  # ElasticSearch for Blog Content Indexing (Optional)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: mejona-blog-elasticsearch
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=false
    ports:
      - "9201:9200"  # Different port to avoid conflicts
    volumes:
      - elasticsearch_blog_data:/usr/share/elasticsearch/data
    restart: unless-stopped
    networks:
      - blog-network
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:9200/_cluster/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Kibana for ElasticSearch Visualization (Optional)
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: mejona-blog-kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5602:5601"  # Different port to avoid conflicts
    depends_on:
      - elasticsearch
    restart: unless-stopped
    networks:
      - blog-network

# Development Override Service (for development only)
  blog-service-dev:
    profiles:
      - dev
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: mejona-blog-service-dev
    ports:
      - "8082:8082"
    environment:
      - GIN_MODE=debug
      - PORT=8082
      - DB_HOST=mysql
      - DB_USER=blog_user
      - DB_PASSWORD=blog_secure_password_2024
      - DB_NAME=mejona_unified
      - ENABLE_SWAGGER=true
      - LOG_LEVEL=debug
    volumes:
      - .:/app
      - ./logs:/app/logs
    depends_on:
      - mysql
      - redis
    restart: "no"
    networks:
      - blog-network

# Networks
networks:
  blog-network:
    driver: bridge
    name: mejona_blog_network
    ipam:
      config:
        - subnet: 172.21.0.0/16

# Volumes
volumes:
  mysql_blog_data:
    driver: local
    name: mejona_blog_mysql_data
  redis_blog_data:
    driver: local
    name: mejona_blog_redis_data
  prometheus_blog_data:
    driver: local
    name: mejona_blog_prometheus_data
  grafana_blog_data:
    driver: local
    name: mejona_blog_grafana_data
  elasticsearch_blog_data:
    driver: local
    name: mejona_blog_elasticsearch_data